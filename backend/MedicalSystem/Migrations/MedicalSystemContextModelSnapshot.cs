// <auto-generated />
using System;
using MedicalSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalSystem.Migrations
{
    [DbContext(typeof(MedicalSystemContext))]
    partial class MedicalSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedicalSystem.Models.Doctor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("DoctorRating")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("([dbo].[getDoctorRating]([ID]))", false);

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("age")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datediff(year,[birthDate],getdate()))", false);

                    b.Property<string>("area")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("birthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<int?>("buildingNumber")
                        .HasColumnType("int");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("city")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("profilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

<<<<<<< HEAD
                    b.HasIndex(new[] { "email" }, "IX_Doctor")
                        .IsUnique();

                    b.HasIndex(new[] { "phone" }, "X_Doctor")
=======
                    b.HasIndex(new[] { "ID" }, "IX_Doctor")
>>>>>>> 6cc4d98420b39905419304e1d127db98aae6017e
                        .IsUnique();

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("MedicalSystem.Models.DoctorRating", b =>
                {
                    b.Property<int>("PID")
                        .HasColumnType("int");

                    b.Property<int>("DID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("PID", "DID");

                    b.HasIndex("DID");

                    b.ToTable("DoctorRating");
                });

            modelBuilder.Entity("MedicalSystem.Models.Other", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("age")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datediff(year,[birthDate],getdate()))", false);

                    b.Property<string>("area")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("birthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<int?>("buildingNumber")
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("job")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("profilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "email" }, "IX_Others")
                        .IsUnique();

                    b.ToTable("Others");
                });

            modelBuilder.Entity("MedicalSystem.Models.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("age")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datediff(year,[birthDate],getdate()))", false);

                    b.Property<string>("area")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("birthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<int?>("buildingNumber")
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("profilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

<<<<<<< HEAD
                    b.HasIndex(new[] { "email" }, "IX_Patient")
                        .IsUnique();

                    b.HasIndex(new[] { "phone" }, "X_Patient")
                        .IsUnique();

=======
>>>>>>> 6cc4d98420b39905419304e1d127db98aae6017e
                    b.ToTable("Patient");
                });

            modelBuilder.Entity("MedicalSystem.Models.Record", b =>
                {
                    b.Property<int>("DID")
                        .HasColumnType("int");

                    b.Property<int>("PID")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FNO")
                        .HasColumnType("int");

                    b.Property<int?>("OID")
                        .HasColumnType("int");

                    b.Property<string>("attached_files")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("file_description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

<<<<<<< HEAD
=======
                    b.Property<string>("prescription")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValue("");

>>>>>>> 6cc4d98420b39905419304e1d127db98aae6017e
                    b.Property<string>("summary")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("DID", "PID", "date", "FNO");

                    b.HasIndex("OID");

                    b.HasIndex(new[] { "PID" }, "IX_Record_PID");

                    b.ToTable("Record");
                });

            modelBuilder.Entity("MedicalSystem.Models.Visit", b =>
                {
                    b.Property<int>("PID")
                        .HasColumnType("int");

                    b.Property<int>("DID")
                        .HasColumnType("int");

                    b.Property<DateTime>("appointment_time")
                        .HasColumnType("datetime2");

                    b.HasKey("PID", "DID", "appointment_time");

                    b.HasIndex(new[] { "DID" }, "IX_Visit_DID");

                    b.ToTable("Visit");
                });

            modelBuilder.Entity("MedicalSystem.Models.Works_in", b =>
                {
                    b.Property<int>("DID")
                        .HasColumnType("int");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("end_time")
                        .HasColumnType("datetime2");

                    b.HasKey("DID", "start_time")
                        .HasName("PK_Works_in_1");

                    b.ToTable("Works_in");
                });

            modelBuilder.Entity("MedicalSystem.Models.DoctorRating", b =>
                {
                    b.HasOne("MedicalSystem.Models.Doctor", "DIDNavigation")
                        .WithMany("DoctorRatings")
                        .HasForeignKey("DID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DoctorRating_Doctor");

                    b.HasOne("MedicalSystem.Models.Patient", "PIDNavigation")
                        .WithMany("DoctorRatings")
                        .HasForeignKey("PID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DoctorRating_Patient");

                    b.Navigation("DIDNavigation");

                    b.Navigation("PIDNavigation");
                });

            modelBuilder.Entity("MedicalSystem.Models.Record", b =>
                {
                    b.HasOne("MedicalSystem.Models.Doctor", "DIDNavigation")
                        .WithMany("Records")
                        .HasForeignKey("DID")
                        .IsRequired()
                        .HasConstraintName("FK_Record_Doctor1");

                    b.HasOne("MedicalSystem.Models.Other", "OIDNavigation")
                        .WithMany("Records")
                        .HasForeignKey("OID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Record_Others");

                    b.HasOne("MedicalSystem.Models.Patient", "PIDNavigation")
                        .WithMany("Records")
                        .HasForeignKey("PID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Record_Patient");

                    b.Navigation("DIDNavigation");

                    b.Navigation("OIDNavigation");

                    b.Navigation("PIDNavigation");
                });

            modelBuilder.Entity("MedicalSystem.Models.Visit", b =>
                {
                    b.HasOne("MedicalSystem.Models.Doctor", "DIDNavigation")
                        .WithMany("Visits")
                        .HasForeignKey("DID")
                        .IsRequired()
                        .HasConstraintName("FK_Visit_Doctor1");

                    b.HasOne("MedicalSystem.Models.Patient", "PIDNavigation")
                        .WithMany("Visits")
                        .HasForeignKey("PID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Visit_Patient1");

                    b.Navigation("DIDNavigation");

                    b.Navigation("PIDNavigation");
                });

            modelBuilder.Entity("MedicalSystem.Models.Works_in", b =>
                {
                    b.HasOne("MedicalSystem.Models.Doctor", "DIDNavigation")
                        .WithMany("Works_ins")
                        .HasForeignKey("DID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Works_in_Doctor");

                    b.Navigation("DIDNavigation");
                });

            modelBuilder.Entity("MedicalSystem.Models.Doctor", b =>
                {
                    b.Navigation("DoctorRatings");

                    b.Navigation("Records");

                    b.Navigation("Visits");

                    b.Navigation("Works_ins");
                });

            modelBuilder.Entity("MedicalSystem.Models.Other", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("MedicalSystem.Models.Patient", b =>
                {
                    b.Navigation("DoctorRatings");

                    b.Navigation("Records");

                    b.Navigation("Visits");
                });
#pragma warning restore 612, 618
        }
    }
}
