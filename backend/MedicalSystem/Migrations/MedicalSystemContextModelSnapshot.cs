// <auto-generated />
using System;
using MedicalSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalSystem.Migrations
{
    [DbContext(typeof(MedicalSystemContext))]
    partial class MedicalSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedicalSystem.Models.Clinic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("phone")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Clinic");
                });

            modelBuilder.Entity("MedicalSystem.Models.Doctor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("age")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("category")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("phone")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("ID");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("MedicalSystem.Models.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("age")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("phone")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("ID");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("MedicalSystem.Models.Record", b =>
                {
                    b.Property<int>("DID")
                        .HasColumnType("int");

                    b.Property<int>("PID")
                        .HasColumnType("int");

                    b.Property<string>("file_description")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<byte[]>("attached_files")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("summary")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("DID", "PID", "file_description");

                    b.HasIndex("PID");

                    b.ToTable("Record");
                });

            modelBuilder.Entity("MedicalSystem.Models.Visit", b =>
                {
                    b.Property<int>("PID")
                        .HasColumnType("int");

                    b.Property<int>("DID")
                        .HasColumnType("int");

                    b.Property<int>("CID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("appointment_time")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("PID", "DID", "CID");

                    b.HasIndex("CID");

                    b.HasIndex("DID");

                    b.ToTable("Visit");
                });

            modelBuilder.Entity("MedicalSystem.Models.Works_in", b =>
                {
                    b.Property<int>("DID")
                        .HasColumnType("int");

                    b.Property<int>("CID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("end_time")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("start_time")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("DID", "CID");

                    b.HasIndex("CID");

                    b.ToTable("Works_in");
                });

            modelBuilder.Entity("MedicalSystem.Models.Record", b =>
                {
                    b.HasOne("MedicalSystem.Models.Doctor", "DIDNavigation")
                        .WithMany("Records")
                        .HasForeignKey("DID")
                        .IsRequired()
                        .HasConstraintName("FK_Record_Doctor");

                    b.HasOne("MedicalSystem.Models.Patient", "PIDNavigation")
                        .WithMany("Records")
                        .HasForeignKey("PID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Record_Patient");

                    b.Navigation("DIDNavigation");

                    b.Navigation("PIDNavigation");
                });

            modelBuilder.Entity("MedicalSystem.Models.Visit", b =>
                {
                    b.HasOne("MedicalSystem.Models.Clinic", "CIDNavigation")
                        .WithMany("Visits")
                        .HasForeignKey("CID")
                        .IsRequired()
                        .HasConstraintName("FK_Visit_Clinic");

                    b.HasOne("MedicalSystem.Models.Doctor", "DIDNavigation")
                        .WithMany("Visits")
                        .HasForeignKey("DID")
                        .IsRequired()
                        .HasConstraintName("FK_Visit_Doctor");

                    b.HasOne("MedicalSystem.Models.Patient", "PIDNavigation")
                        .WithMany("Visits")
                        .HasForeignKey("PID")
                        .IsRequired()
                        .HasConstraintName("FK_Visit_Patient");

                    b.Navigation("CIDNavigation");

                    b.Navigation("DIDNavigation");

                    b.Navigation("PIDNavigation");
                });

            modelBuilder.Entity("MedicalSystem.Models.Works_in", b =>
                {
                    b.HasOne("MedicalSystem.Models.Clinic", "CIDNavigation")
                        .WithMany("Works_ins")
                        .HasForeignKey("CID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Works_in_Clinic");

                    b.HasOne("MedicalSystem.Models.Doctor", "DIDNavigation")
                        .WithMany("Works_ins")
                        .HasForeignKey("DID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Works_in_Doctor");

                    b.Navigation("CIDNavigation");

                    b.Navigation("DIDNavigation");
                });

            modelBuilder.Entity("MedicalSystem.Models.Clinic", b =>
                {
                    b.Navigation("Visits");

                    b.Navigation("Works_ins");
                });

            modelBuilder.Entity("MedicalSystem.Models.Doctor", b =>
                {
                    b.Navigation("Records");

                    b.Navigation("Visits");

                    b.Navigation("Works_ins");
                });

            modelBuilder.Entity("MedicalSystem.Models.Patient", b =>
                {
                    b.Navigation("Records");

                    b.Navigation("Visits");
                });
#pragma warning restore 612, 618
        }
    }
}
